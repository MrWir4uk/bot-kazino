import random
import asyncio
import aiosqlite
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.types import BotCommand

API_TOKEN = "8363009902:AAFZjpldsLbOPAU7OzrBxvsiNABkOFqkMUU"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

active_mines = {}  # –∞–∫—Ç–∏–≤–Ω—ñ —ñ–≥—Ä–∏ Mines
DB_FILE = "casino.db"

# --- –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö ---
async def init_db():
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                balance INTEGER DEFAULT 1000,
                last_bonus INTEGER DEFAULT 0
            )
        """)
        await db.commit()

async def add_user(user_id: int, username: str = None):
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute(
            "INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)",
            (user_id, username)
        )
        await db.commit()
        if username:
            await db.execute("UPDATE users SET username = ? WHERE user_id = ?", (username, user_id))
            await db.commit()

async def get_balance(user_id: int) -> int:
    async with aiosqlite.connect(DB_FILE) as db:
        async with db.execute("SELECT balance FROM users WHERE user_id = ?", (user_id,)) as cur:
            row = await cur.fetchone()
            return row[0] if row else 0

async def update_balance(user_id: int, amount: int):
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, user_id))
        await db.commit()

async def set_last_bonus(user_id: int, timestamp: int):
    async with aiosqlite.connect(DB_FILE) as db:
        await db.execute("UPDATE users SET last_bonus = ? WHERE user_id = ?", (timestamp, user_id))
        await db.commit()

async def get_last_bonus(user_id: int) -> int:
    async with aiosqlite.connect(DB_FILE) as db:
        async with db.execute("SELECT last_bonus FROM users WHERE user_id = ?", (user_id,)) as cur:
            row = await cur.fetchone()
            return row[0] if row else 0

async def get_top_users(limit=15):
    async with aiosqlite.connect(DB_FILE) as db:
        async with db.execute("SELECT username, balance FROM users ORDER BY balance DESC LIMIT ?", (limit,)) as cur:
            return await cur.fetchall()

async def set_commands():
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ —Ç–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç"),
        BotCommand(command="balance", description="–ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∞—à –±–∞–ª–∞–Ω—Å"),
        BotCommand(command="bonus", description="–û—Ç—Ä–∏–º–∞—Ç–∏ –±–æ–Ω—É—Å —Ä–∞–∑ –Ω–∞ 6 –≥–æ–¥–∏–Ω"),
        BotCommand(command="mins", description="–ì—Ä–∞—Ç–∏ —É –≥—Ä—É Mines (/mins <—Å—Ç–∞–≤–∫–∞>)"),
        BotCommand(command="spin", description="–ì—Ä–∞—Ç–∏ —É Red –∞–±–æ Black (/spin <—Å—Ç–∞–≤–∫–∞> <red/black>)"),
        BotCommand(command="dice", description="–ì—Ä–∞—Ç–∏ —É –∫–∏–¥–æ–∫ –∫—É–±–∏–∫–∞ (/dice <—Å—Ç–∞–≤–∫–∞> <1-6>)"),
        BotCommand(command="guess", description="–ì—Ä–∞—Ç–∏ —É –í–≥–∞–¥–∞–π —á–∏—Å–ª–æ (/guess <—Å—Ç–∞–≤–∫–∞> <1-10>)"),
        BotCommand(command="pay", description="–ü–µ—Ä–µ—Å–ª–∞—Ç–∏ –º–æ–Ω–µ—Ç–∏ —ñ–Ω—à–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (/pay <user_id> <—Å—É–º–∞>)"),
        BotCommand(command="top", description="–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–æ–ø-15 –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º")
    ]
    await bot.set_my_commands(commands)

# --- –°—Ç–∞—Ä—Ç —ñ –±–∞–ª–∞–Ω—Å ---
@dp.message(Command("start"))
async def start(message: types.Message):
    await add_user(message.from_user.id, message.from_user.username)
    await message.answer(
        "üé∞ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –í–∞—à –∞–∫–∞—É–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ. –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: 1000 –º–æ–Ω–µ—Ç.\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /bonus, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–≥–æ—Ä–æ–¥—É!\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /balance, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å.\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /mins <—Å—Ç–∞–≤–∫–∞>, —â–æ–± –≥—Ä–∞—Ç–∏ —É Mines!\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /spin <—Å—Ç–∞–≤–∫–∞> <red/black>, —â–æ–± –≥—Ä–∞—Ç–∏ —É Red –∞–±–æ Black!\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /dice <—Å—Ç–∞–≤–∫–∞> <1-6>, —â–æ–± –∫–∏–Ω—É—Ç–∏ –∫—É–±–∏–∫!\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /guess <—Å—Ç–∞–≤–∫–∞> <1-10>, —â–æ–± –≤–≥–∞–¥–∞—Ç–∏ —á–∏—Å–ª–æ!\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /pay <user_id> <—Å—É–º–∞>, —â–æ–± –ø–µ—Ä–µ—Å–ª–∞—Ç–∏ –º–æ–Ω–µ—Ç–∏.\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /top, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ç–æ–ø-15 –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º!"
    )

@dp.message(Command("balance"))
async def balance_cmd(message: types.Message):
    bal = await get_balance(message.from_user.id)
    await message.answer(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {bal} –º–æ–Ω–µ—Ç")

@dp.message(Command("bonus"))
async def bonus_cmd(message: types.Message):
    user_id = message.from_user.id
    await add_user(user_id, message.from_user.username)
    now = int(asyncio.get_event_loop().time())
    last = await get_last_bonus(user_id)

    if now - last < 21600:  # 6 –≥–æ–¥–∏–Ω
        wait = 21600 - (now - last)
        hours = wait // 3600
        minutes = (wait % 3600) // 60
        await message.answer(f"‚è≥ –ù–∞—Å—Ç—É–ø–Ω–∏–π –±–æ–Ω—É—Å –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —á–µ—Ä–µ–∑ {hours} –≥–æ–¥ {minutes} —Ö–≤.")
        return

    reward = random.randint(200, 2000)
    await update_balance(user_id, reward)
    await set_last_bonus(user_id, now)
    balance = await get_balance(user_id)
    await message.answer(f"üéÅ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ {reward} –º–æ–Ω–µ—Ç!\nüí∞ –ë–∞–ª–∞–Ω—Å: {balance}")

# --- –¢–æ–ø 15 ---
@dp.message(Command("top"))
async def top_cmd(message: types.Message):
    top_users = await get_top_users(15)
    if not top_users:
        await message.answer("–ù–µ–º–∞—î –≥—Ä–∞–≤—Ü—ñ–≤ —É –±–∞–∑—ñ.")
        return
    text = "üèÜ –¢–æ–ø-15 –≥—Ä–∞–≤—Ü—ñ–≤ –∑–∞ –±–∞–ª–∞–Ω—Å–æ–º:\n"
    for i, (username, balance) in enumerate(top_users, 1):
        name = username if username else "–ë–µ–∑ –Ω—ñ–∫—É"
        text += f"{i}. üë§ {name} ‚Äî {balance} –º–æ–Ω–µ—Ç\n"
    await message.answer(text)

# --- Mines Game ---
@dp.message(Command("mins"))
async def mins_game(message: types.Message):
    user_id = message.from_user.id
    await add_user(user_id, message.from_user.username)
    args = message.text.split()
    if len(args) != 2 or not args[1].isdigit():
        await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /mins <—Å—Ç–∞–≤–∫–∞>")
        return

    bet = int(args[1])
    balance = await get_balance(user_id)
    if bet > balance:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –º–æ–Ω–µ—Ç!")
        return

    await update_balance(user_id, -bet)

    mines_count = 5
    cells = list(range(25))
    mines = set(random.sample(cells, mines_count))
    active_mines[user_id] = {
        "bet": bet,
        "multiplier": 1.0,
        "mines": mines,
        "opened": set()
    }

    buttons = [InlineKeyboardButton(text="‚ùî", callback_data=str(i)) for i in range(25)]
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[buttons[i:i+5] for i in range(0, 25, 5)]
    )
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üí∞ –ó–Ω—è—Ç–∏", callback_data="cashout")])

    await message.answer(f"üéÆ Mines Game –ø–æ—á–∞–ª–∞—Å—å! –°—Ç–∞–≤–∫–∞: {bet}\n–í–∏–±–µ—Ä—ñ—Ç—å –∫–ª—ñ—Ç–∏–Ω–∫—É.", reply_markup=keyboard)

@dp.callback_query()
async def handle_cell(call: CallbackQuery):
    user_id = call.from_user.id
    if user_id not in active_mines:
        await call.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó –≥—Ä–∏.", show_alert=True)
        return

    game = active_mines[user_id]

    if call.data == "cashout":
        win_amount = int(game["bet"] * game["multiplier"])
        await update_balance(user_id, win_amount)
        await call.message.edit_text(f"üí∏ –í–∏ –∑–Ω—è–ª–∏ —Å—Ç–∞–≤–∫—É! –í–∏ –≤–∏–≥—Ä–∞–ª–∏ {win_amount} –º–æ–Ω–µ—Ç.")
        del active_mines[user_id]
        return

    cell = int(call.data)
    if cell in game["opened"]:
        await call.answer("–í–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–æ!", show_alert=True)
        return

    if cell in game["mines"]:
        await call.message.edit_text(f"üí• –ë—É–º! –í–∏ –Ω–∞—Ç—Ä–∞–ø–∏–ª–∏ –Ω–∞ –º—ñ–Ω—É.\n–í—Ç—Ä–∞—á–µ–Ω—ñ {game['bet']} –º–æ–Ω–µ—Ç.")
        del active_mines[user_id]
        return

    # –í–¥–∞–ª–µ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è
    game["opened"].add(cell)
    game["multiplier"] *= 1.65
    win_amount = int(game["bet"] * game["multiplier"])

    buttons = []
    for i in range(25):
        if i in game["opened"]:
            buttons.append(InlineKeyboardButton(text="‚úÖ", callback_data=str(i)))
        else:
            buttons.append(InlineKeyboardButton(text="‚ùî", callback_data=str(i)))
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[buttons[i:i+5] for i in range(0, 25, 5)]
    )
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üí∞ –ó–Ω—è—Ç–∏", callback_data="cashout")])

    await call.message.edit_text(
        f"üéÆ Mines Game\n–ü–æ—Ç–æ—á–Ω–∏–π –≤–∏–≥—Ä–∞—à: {win_amount} –º–æ–Ω–µ—Ç\n–í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –∫–ª—ñ—Ç–∏–Ω–∫—É!",
        reply_markup=keyboard
    )

    if len(game["opened"]) >= 20:
        await update_balance(user_id, win_amount)
        await call.message.edit_text(f"üéâ –í–∏ –æ—á–∏—Å—Ç–∏–ª–∏ –ø–æ–ª–µ! –í–∏ –≤–∏–≥—Ä–∞–ª–∏ {win_amount} –º–æ–Ω–µ—Ç!")
        del active_mines[user_id]

# --- Spin / Dice / Guess / Pay –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω, –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –∑–∞ –ø–æ—Ç—Ä–µ–±–∏ ---

async def main():
    await init_db()
    await set_commands()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

